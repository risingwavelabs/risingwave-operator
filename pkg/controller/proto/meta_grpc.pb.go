// Copyright 2024 RisingWave Labs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: meta.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetaMemberServiceClient is the client API for MetaMemberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaMemberServiceClient interface {
	Members(ctx context.Context, in *MembersRequest, opts ...grpc.CallOption) (*MembersResponse, error)
}

type metaMemberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaMemberServiceClient(cc grpc.ClientConnInterface) MetaMemberServiceClient {
	return &metaMemberServiceClient{cc}
}

func (c *metaMemberServiceClient) Members(ctx context.Context, in *MembersRequest, opts ...grpc.CallOption) (*MembersResponse, error) {
	out := new(MembersResponse)
	err := c.cc.Invoke(ctx, "/meta.MetaMemberService/Members", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaMemberServiceServer is the server API for MetaMemberService service.
// All implementations must embed UnimplementedMetaMemberServiceServer
// for forward compatibility
type MetaMemberServiceServer interface {
	Members(context.Context, *MembersRequest) (*MembersResponse, error)
	mustEmbedUnimplementedMetaMemberServiceServer()
}

// UnimplementedMetaMemberServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetaMemberServiceServer struct {
}

func (UnimplementedMetaMemberServiceServer) Members(context.Context, *MembersRequest) (*MembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Members not implemented")
}
func (UnimplementedMetaMemberServiceServer) mustEmbedUnimplementedMetaMemberServiceServer() {}

// UnsafeMetaMemberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaMemberServiceServer will
// result in compilation errors.
type UnsafeMetaMemberServiceServer interface {
	mustEmbedUnimplementedMetaMemberServiceServer()
}

func RegisterMetaMemberServiceServer(s grpc.ServiceRegistrar, srv MetaMemberServiceServer) {
	s.RegisterService(&MetaMemberService_ServiceDesc, srv)
}

func _MetaMemberService_Members_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaMemberServiceServer).Members(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta.MetaMemberService/Members",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaMemberServiceServer).Members(ctx, req.(*MembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaMemberService_ServiceDesc is the grpc.ServiceDesc for MetaMemberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaMemberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meta.MetaMemberService",
	HandlerType: (*MetaMemberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Members",
			Handler:    _MetaMemberService_Members_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meta.proto",
}
