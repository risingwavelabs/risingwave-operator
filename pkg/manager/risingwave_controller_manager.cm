bind v1 k8s.io/api/core/v1
bind apps/v1 k8s.io/api/apps/v1
bind risingwave.singularity-data.com/v1alpha1 github.com/singularity-data/risingwave-operator/apis/risingwave/v1alpha1

alias Pod v1/Pod
alias Service v1/Service
alias Secret v1/Secret
alias ConfigMap v1/ConfigMap
alias Deployment apps/v1/Deployment
alias StatefulSet apps/v1/StatefulSet
alias RisingWave risingwave.singularity-data.com/v1alpha1/RisingWave

// RisingWaveControllerManager encapsulates the states and actions used by RisingWaveController.
decl RisingWaveControllerManager for RisingWave {
    // ===================================================
    // States and actions for RisingWave components.
    // ===================================================

    state {
        // Service for meta nodes.
        metaService Service {
            name=${target.Name}-meta
            owned
        }

        // Service for frontend nodes.
        frontendService Service {
            name=${target.Name}-frontend
            owned
        }

        // Service for compute nodes.
        computeService Service {
            name=${target.Name}-compute
            owned
        }

        // Service for compactor nodes.
        compactorService Service {
            name=${target.Name}-compactor
            owned
        }

        // ConfigMap for RisingWave configs.
        configConfigMap ConfigMap {
            name=${target.Name}-config
            owned
        }

        // Deployments for meta nodes.
        metaDeployments []Deployment {
            labels/risingwave/name=${target.Name}
            labels/risingwave/component=meta
            owned
        }

        // Deployments for frontend nodes.
        frontendDeployments []Deployment {
            labels/risingwave/name=${target.Name}
            labels/risingwave/component=frontend
            owned
        }

        // StatefulSets for compute nodes.
        computeStatefulSets []StatefulSet {
            labels/risingwave/name=${target.Name}
            labels/risingwave/component=compute
            owned
        }

        // Deployments for compactor nodes.
        compactorDeployments []Deployment {
            labels/risingwave/name=${target.Name}
            labels/risingwave/component=compactor
            owned
        }
    }

    action {
        // SyncMetaService creates or updates the service for meta nodes.
        SyncMetaService(metaService)

        // SyncMetaDeployments creates or updates the deployments for meta nodes.
        SyncMetaDeployments(metaDeployments)

        // WaitBeforeMetaServiceIsAvailable waits (aborts the workflow) before the meta service is available.
        WaitBeforeMetaServiceIsAvailable(metaService)

        // WaitBeforeMetaDeploymentsReady waits (aborts the workflow) before the meta deployments are ready.
        WaitBeforeMetaDeploymentsReady(metaDeployments)

        // SyncFrontendService creates or updates the service for frontend nodes.
        SyncFrontendService(frontendService)

        // SyncFrontendDeployments creates or updates the deployments for frontend nodes.
        SyncFrontendDeployments(frontendDeployments)

        // WaitBeforeFrontendDeploymentsReady waits (aborts the workflow) before the frontend deployments are ready.
        WaitBeforeFrontendDeploymentsReady(frontendDeployments)

        // SyncComputeService creates or updates the service for compute nodes.
        SyncComputeService(computeService)

        // SyncComputeStatefulSets creates or updates the statefulsets for compute nodes.
        SyncComputeStatefulSets(computeStatefulSets)

        // WaitBeforeComputeStatefulSetsReady waits (aborts the workflow) before the compute statefulsets are ready.
        WaitBeforeComputeStatefulSetsReady(computeStatefulSets)

        // SyncCompactorService creates or updates the service for compactor nodes.
        SyncCompactorService(compactorService)

        // SyncCompactorDeployments creates or updates the deployments for compactor nodes.
        SyncCompactorDeployments(compactorDeployments)

        // WaitBeforeCompactorDeploymentsReady waits (aborts the workflow) before the compactor deployments are ready.
        WaitBeforeCompactorDeploymentsReady(compactorDeployments)

        // SyncConfigConfigMap creates or updates the configmap for RisingWave configs.
        SyncConfigConfigMap(configConfigMap)
    }

    // ===================================================
    // States and actions for third-party components.
    // ===================================================

    action {
        // CollectRunningStatisticsAndSyncStatus collects running statistics and sync them into the status.
        CollectRunningStatisticsAndSyncStatus(frontendService, metaService, computeService, compactorService, metaDeployments, frontendDeployments, computeStatefulSets, compactorDeployments, configConfigMap)
    }
}