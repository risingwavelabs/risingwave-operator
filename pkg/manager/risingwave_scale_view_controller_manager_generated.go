//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
 * Copyright 2023 RisingWave Labs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by ctrlkit. DO NOT EDIT.

package manager

import (
	"context"
	"fmt"

	"github.com/go-logr/logr"
	"github.com/risingwavelabs/ctrlkit"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"

	risingwavev1alpha1 "github.com/risingwavelabs/risingwave-operator/apis/risingwave/v1alpha1"
)

// RisingWaveScaleViewControllerManagerState is the state manager of RisingWaveScaleViewControllerManager.
type RisingWaveScaleViewControllerManagerState struct {
	client.Reader
	target *risingwavev1alpha1.RisingWaveScaleView
}

// GetTargetObj gets targetObj with name equals to ${target.Spec.TargetRef.Name}.
func (s *RisingWaveScaleViewControllerManagerState) GetTargetObj(ctx context.Context) (*risingwavev1alpha1.RisingWave, error) {
	var targetObj risingwavev1alpha1.RisingWave

	err := s.Get(ctx, types.NamespacedName{
		Namespace: s.target.Namespace,
		Name:      s.target.Spec.TargetRef.Name,
	}, &targetObj)
	if err != nil {
		if apierrors.IsNotFound(err) {
			return nil, nil
		}
		return nil, fmt.Errorf("unable to get state 'targetObj': %w", err)
	}

	return &targetObj, nil
}

// NewRisingWaveScaleViewControllerManagerState returns a RisingWaveScaleViewControllerManagerState (target is not copied).
func NewRisingWaveScaleViewControllerManagerState(reader client.Reader, target *risingwavev1alpha1.RisingWaveScaleView) RisingWaveScaleViewControllerManagerState {
	return RisingWaveScaleViewControllerManagerState{
		Reader: reader,
		target: target,
	}
}

// RisingWaveScaleViewControllerManagerImpl declares the implementation interface for RisingWaveScaleViewControllerManager.
type RisingWaveScaleViewControllerManagerImpl interface {
	// Grab or update the lock for the current RisingWaveScaleView.
	GrabOrUpdateScaleViewLock(ctx context.Context, logger logr.Logger, targetObj *risingwavev1alpha1.RisingWave) (ctrl.Result, error)

	// Sync the replicas of targeting groups to RisingWave's spec.
	SyncGroupReplicasToRisingWave(ctx context.Context, logger logr.Logger, targetObj *risingwavev1alpha1.RisingWave) (ctrl.Result, error)

	// Sync the replicas from RisingWave's spec.
	SyncGroupReplicasStatusFromRisingWave(ctx context.Context, logger logr.Logger, targetObj *risingwavev1alpha1.RisingWave) (ctrl.Result, error)

	// Update the status.
	UpdateScaleViewStatus(ctx context.Context, logger logr.Logger) (ctrl.Result, error)
}

// Pre-defined actions in RisingWaveScaleViewControllerManager.
const (
	RisingWaveScaleViewAction_GrabOrUpdateScaleViewLock             = "GrabOrUpdateScaleViewLock"
	RisingWaveScaleViewAction_SyncGroupReplicasToRisingWave         = "SyncGroupReplicasToRisingWave"
	RisingWaveScaleViewAction_SyncGroupReplicasStatusFromRisingWave = "SyncGroupReplicasStatusFromRisingWave"
	RisingWaveScaleViewAction_UpdateScaleViewStatus                 = "UpdateScaleViewStatus"
)

// RisingWaveScaleViewControllerManager encapsulates the states and actions used by RisingWaveScaleViewController.
type RisingWaveScaleViewControllerManager struct {
	hook   ctrlkit.ActionHook
	state  RisingWaveScaleViewControllerManagerState
	impl   RisingWaveScaleViewControllerManagerImpl
	logger logr.Logger
}

// NewAction returns a new action controlled by the manager.
func (m *RisingWaveScaleViewControllerManager) NewAction(description string, f func(context.Context, logr.Logger) (ctrl.Result, error)) ctrlkit.Action {
	return ctrlkit.NewAction(description, func(ctx context.Context) (result ctrl.Result, err error) {
		logger := m.logger.WithValues("action", description)

		if m.hook != nil {
			defer func() { m.hook.PostRun(ctx, logger, description, result, err) }()
			m.hook.PreRun(ctx, logger, description, nil)
		}

		return f(ctx, logger)
	})
}

// GrabOrUpdateScaleViewLock generates the action of "GrabOrUpdateScaleViewLock".
func (m *RisingWaveScaleViewControllerManager) GrabOrUpdateScaleViewLock() ctrlkit.Action {
	return ctrlkit.NewAction(RisingWaveScaleViewAction_GrabOrUpdateScaleViewLock, func(ctx context.Context) (result ctrl.Result, err error) {
		logger := m.logger.WithValues("action", RisingWaveScaleViewAction_GrabOrUpdateScaleViewLock)

		// Get states.
		targetObj, err := m.state.GetTargetObj(ctx)
		if err != nil {
			return ctrlkit.RequeueIfError(err)
		}

		// Invoke action.
		if m.hook != nil {
			defer func() { m.hook.PostRun(ctx, logger, RisingWaveScaleViewAction_GrabOrUpdateScaleViewLock, result, err) }()
			m.hook.PreRun(ctx, logger, RisingWaveScaleViewAction_GrabOrUpdateScaleViewLock, map[string]runtime.Object{
				"targetObj": targetObj,
			})
		}

		return m.impl.GrabOrUpdateScaleViewLock(ctx, logger, targetObj)
	})
}

// SyncGroupReplicasToRisingWave generates the action of "SyncGroupReplicasToRisingWave".
func (m *RisingWaveScaleViewControllerManager) SyncGroupReplicasToRisingWave() ctrlkit.Action {
	return ctrlkit.NewAction(RisingWaveScaleViewAction_SyncGroupReplicasToRisingWave, func(ctx context.Context) (result ctrl.Result, err error) {
		logger := m.logger.WithValues("action", RisingWaveScaleViewAction_SyncGroupReplicasToRisingWave)

		// Get states.
		targetObj, err := m.state.GetTargetObj(ctx)
		if err != nil {
			return ctrlkit.RequeueIfError(err)
		}

		// Invoke action.
		if m.hook != nil {
			defer func() {
				m.hook.PostRun(ctx, logger, RisingWaveScaleViewAction_SyncGroupReplicasToRisingWave, result, err)
			}()
			m.hook.PreRun(ctx, logger, RisingWaveScaleViewAction_SyncGroupReplicasToRisingWave, map[string]runtime.Object{
				"targetObj": targetObj,
			})
		}

		return m.impl.SyncGroupReplicasToRisingWave(ctx, logger, targetObj)
	})
}

// SyncGroupReplicasStatusFromRisingWave generates the action of "SyncGroupReplicasStatusFromRisingWave".
func (m *RisingWaveScaleViewControllerManager) SyncGroupReplicasStatusFromRisingWave() ctrlkit.Action {
	return ctrlkit.NewAction(RisingWaveScaleViewAction_SyncGroupReplicasStatusFromRisingWave, func(ctx context.Context) (result ctrl.Result, err error) {
		logger := m.logger.WithValues("action", RisingWaveScaleViewAction_SyncGroupReplicasStatusFromRisingWave)

		// Get states.
		targetObj, err := m.state.GetTargetObj(ctx)
		if err != nil {
			return ctrlkit.RequeueIfError(err)
		}

		// Invoke action.
		if m.hook != nil {
			defer func() {
				m.hook.PostRun(ctx, logger, RisingWaveScaleViewAction_SyncGroupReplicasStatusFromRisingWave, result, err)
			}()
			m.hook.PreRun(ctx, logger, RisingWaveScaleViewAction_SyncGroupReplicasStatusFromRisingWave, map[string]runtime.Object{
				"targetObj": targetObj,
			})
		}

		return m.impl.SyncGroupReplicasStatusFromRisingWave(ctx, logger, targetObj)
	})
}

// UpdateScaleViewStatus generates the action of "UpdateScaleViewStatus".
func (m *RisingWaveScaleViewControllerManager) UpdateScaleViewStatus() ctrlkit.Action {
	return ctrlkit.NewAction(RisingWaveScaleViewAction_UpdateScaleViewStatus, func(ctx context.Context) (result ctrl.Result, err error) {
		logger := m.logger.WithValues("action", RisingWaveScaleViewAction_UpdateScaleViewStatus)

		// Invoke action.
		if m.hook != nil {
			defer func() { m.hook.PostRun(ctx, logger, RisingWaveScaleViewAction_UpdateScaleViewStatus, result, err) }()
			m.hook.PreRun(ctx, logger, RisingWaveScaleViewAction_UpdateScaleViewStatus, nil)
		}

		return m.impl.UpdateScaleViewStatus(ctx, logger)
	})
}

type RisingWaveScaleViewControllerManagerOption func(*RisingWaveScaleViewControllerManager)

func RisingWaveScaleViewControllerManager_WithActionHook(hook ctrlkit.ActionHook) RisingWaveScaleViewControllerManagerOption {
	return func(m *RisingWaveScaleViewControllerManager) {
		m.hook = hook
	}
}

// NewRisingWaveScaleViewControllerManager returns a new RisingWaveScaleViewControllerManager with given state and implementation.
func NewRisingWaveScaleViewControllerManager(state RisingWaveScaleViewControllerManagerState, impl RisingWaveScaleViewControllerManagerImpl, logger logr.Logger, opts ...RisingWaveScaleViewControllerManagerOption) RisingWaveScaleViewControllerManager {
	m := RisingWaveScaleViewControllerManager{
		state:  state,
		impl:   impl,
		logger: logger,
	}

	for _, opt := range opts {
		opt(&m)
	}

	return m
}
